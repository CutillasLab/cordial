}
} else {
dataset <- dataset[, select_cols, with = FALSE] # Select columns
}
try({
# Correlation analysis
cor_result <- collapse::pwcor(
dataset,
N = TRUE, P = TRUE, array = TRUE,
use = "pairwise.complete.obs"
)
# Create output data.table (long format)
result_DT <- data.table::transpose(
collapse::qDT(aperm(cor_result)),
keep.names = "Correlation"
) %>%
tidyr::separate(.,
col = 1L, into = c("Correlation", "Target"), sep = "[.]"
) %>%
data.table::setnames(.,
old = c("V1", "V2", "V3"),
new = c("r", "n", "p")
) %>%
data.table::setcolorder(.,
c("Target", "Correlation", "n", "r", "p")
) #%>%
print(is.data.table(result_DT))
result_DT <- unique(
result_DT[, c("Target", "Correlation") :=
list(
pmin(Target, Correlation),
pmax(Target, Correlation)
)
],
by = c("Target", "Correlation")
)
# Calculate adjusted p-value
result_DT[, `:=`(q = p.adjust(p, method = (method)))]
if (!is.null(filter_rows)) {
# Include filters used
result_DT <- cbind(result_DT, collapse::qDT(filter_rows)) %>%
{
.[
, names(filter_rows)
:= purrr::imap(
.x = filter_rows,
.f = ~ paste(filter_rows[[.y]], collapse = ", ")
)
]
}
}
# Order output
data.table::setorder(result_DT, Target, q)
# Return output
if (self == "yes") {
# Include self-correlation
# Fill NA values for self-correlations
data.table::setnafill(
result_DT,
type = "const", fill = 0.0, nan = NA, cols = c("p", "q")
)
return(result_DT)
} else if (self == "no") {
# Exclude self-correlation
return(result_DT[!(Target == Correlation)])
}
})
}
#
cor_map_mod(
dataset = rnai_DT[,7:26]
# select_cols = targets#,
# filter_rows = list(lineage_1 = unique_lineages[1])
)
cor_map_mod <- function(
dataset,
select_cols = colnames(dataset),
filter_rows = NULL,
metadata = NULL,
self = "yes",
method = "BH"
) {
# Pearson correlation analysis for an entire dataset
# Load packages
require(magrittr)
require(tidyr)
require(purrr)
require(collapse)
require(data.table)
# Argument error checks
if (isFALSE(data.table::is.data.table(dataset))) {
stop(
'
Error: `dataset` must be a `data.table`:
i `dataset` has been supplied.
x `dataset` is not a `data.table`.
',
call. = FALSE
)
}
if ((length(self) > 1L) || (!(self %in% c("yes", "no")))) {
stop(
'
Error: `self` must be a single value:
i `self` must be single value.
i `self` must be one from `c("yes", "no")`.
x `self` is incorrect.
',
call. = FALSE
)
}
if (!is.null(metadata)) {
if (isFALSE(data.table::is.data.table(metadata))) {
stop(
'
Error: `metadata` must be a `data.table`:
i `metadata` has been supplied.
x `metadata` is not a `data.table`.
',
call. = FALSE
)
}
if (attr(dataset, "sorted") != attr(metadata, "sorted")) {
stop(
'
Error: `dataset` and `metadata` must be "sorted" by the same column:
i Did you mean to input separate `metadata`?
i Set key with `data.table::setkey(x, ...)`.
x `dataset` and `metadata` attribute "sorted" is not identical.
',
call. = FALSE
)
}
if (any(select_cols %!in% colnames(metadata))) {
stop(
'
Error: `select_cols` must index within `metadata`.
i `metadata` has been supplied.
x `select_cols` does not index within `metadata`.
',
call. = FALSE
)
}
}
if (!is.null(filter_rows)) {
if ((!is.list(filter_rows)) || (!all(nzchar(names(filter_rows))))) {
stop(
'
Error: `filter_rows` must be a named list:
i `filter_rows` must be a list.
i All elements of `filter_rows` must be named.
x `filter_rows` is not a named list.
',
call. = FALSE
)
}
if (is.null(metadata)) {
if (any(select_cols %!in% colnames(dataset))) {
stop(
'
Error: `select_cols` must index within `dataset`.
i `filter_rows` has been supplied.
x `select_cols` does not index within `dataset`.
',
call. = FALSE
)
}
} else if (any(select_cols %!in% colnames(metadata))) {
stop(
'
Error: `select_cols` must index within `metadata`.
i `filter_rows` has been supplied.
i `metadata` has been supplied.
x `select_cols` does not index within `metadata`.
',
call. = FALSE
)
}
}
# Subset dataset
if (!is.null(filter_rows)) {
if (is.null(metadata)) {
# Filter using dataset
dataset <- dataset[
do.call(CJ, filter_rows),
.SD,
.SDcols = select_cols,                      # Select columns for analysis
on = names(filter_rows),
nomatch = NULL                              # Omit non-matching rows
]
} else {
# Filter using metadata
dataset <- dataset[
metadata[
do.call(CJ, filter_rows),
.SD,                                      # Only `key` is returned to join as
.SDcols = data.table::key(metadata),      # subset with dataset on shared key
on = names(filter_rows),
nomatch = NULL                            # Omit non-matching rows
],
.SD,
.SDcols = select_cols,                      # Select columns for analysis
on = data.table::key(dataset),              # Join on `key`
nomatch = NULL                              # Omit non-matching rows
]
}
} else {
dataset <- dataset[, select_cols, with = FALSE] # Select columns
}
try({
# Correlation analysis
cor_result <- collapse::pwcor(
dataset,
N = TRUE, P = TRUE, array = TRUE,
use = "pairwise.complete.obs"
)
# Create output data.table (long format)
result_DT <- data.table::transpose(
collapse::qDT(aperm(cor_result)),
keep.names = "Correlation"
) %>%
tidyr::separate(.,
col = 1L, into = c("Correlation", "Target"), sep = "[.]"
) %>%
data.table::setnames(.,
old = c("V1", "V2", "V3"),
new = c("r", "n", "p")
) %>%
data.table::setcolorder(.,
c("Target", "Correlation", "n", "r", "p")
) #%>%
print(is.data.table(as.data.table(result_DT)))
result_DT <- unique(
result_DT[, c("Target", "Correlation") :=
list(
pmin(Target, Correlation),
pmax(Target, Correlation)
)
],
by = c("Target", "Correlation")
)
# Calculate adjusted p-value
result_DT[, `:=`(q = p.adjust(p, method = (method)))]
if (!is.null(filter_rows)) {
# Include filters used
result_DT <- cbind(result_DT, collapse::qDT(filter_rows)) %>%
{
.[
, names(filter_rows)
:= purrr::imap(
.x = filter_rows,
.f = ~ paste(filter_rows[[.y]], collapse = ", ")
)
]
}
}
# Order output
data.table::setorder(result_DT, Target, q)
# Return output
if (self == "yes") {
# Include self-correlation
# Fill NA values for self-correlations
data.table::setnafill(
result_DT,
type = "const", fill = 0.0, nan = NA, cols = c("p", "q")
)
return(result_DT)
} else if (self == "no") {
# Exclude self-correlation
return(result_DT[!(Target == Correlation)])
}
})
}
#
cor_map_mod(
dataset = rnai_DT[,7:26]
# select_cols = targets#,
# filter_rows = list(lineage_1 = unique_lineages[1])
)
cor_map_mod <- function(
dataset,
select_cols = colnames(dataset),
filter_rows = NULL,
metadata = NULL,
self = "yes",
method = "BH"
) {
# Pearson correlation analysis for an entire dataset
# Load packages
require(magrittr)
require(tidyr)
require(purrr)
require(collapse)
require(data.table)
# Argument error checks
if (isFALSE(data.table::is.data.table(dataset))) {
stop(
'
Error: `dataset` must be a `data.table`:
i `dataset` has been supplied.
x `dataset` is not a `data.table`.
',
call. = FALSE
)
}
if ((length(self) > 1L) || (!(self %in% c("yes", "no")))) {
stop(
'
Error: `self` must be a single value:
i `self` must be single value.
i `self` must be one from `c("yes", "no")`.
x `self` is incorrect.
',
call. = FALSE
)
}
if (!is.null(metadata)) {
if (isFALSE(data.table::is.data.table(metadata))) {
stop(
'
Error: `metadata` must be a `data.table`:
i `metadata` has been supplied.
x `metadata` is not a `data.table`.
',
call. = FALSE
)
}
if (attr(dataset, "sorted") != attr(metadata, "sorted")) {
stop(
'
Error: `dataset` and `metadata` must be "sorted" by the same column:
i Did you mean to input separate `metadata`?
i Set key with `data.table::setkey(x, ...)`.
x `dataset` and `metadata` attribute "sorted" is not identical.
',
call. = FALSE
)
}
if (any(select_cols %!in% colnames(metadata))) {
stop(
'
Error: `select_cols` must index within `metadata`.
i `metadata` has been supplied.
x `select_cols` does not index within `metadata`.
',
call. = FALSE
)
}
}
if (!is.null(filter_rows)) {
if ((!is.list(filter_rows)) || (!all(nzchar(names(filter_rows))))) {
stop(
'
Error: `filter_rows` must be a named list:
i `filter_rows` must be a list.
i All elements of `filter_rows` must be named.
x `filter_rows` is not a named list.
',
call. = FALSE
)
}
if (is.null(metadata)) {
if (any(select_cols %!in% colnames(dataset))) {
stop(
'
Error: `select_cols` must index within `dataset`.
i `filter_rows` has been supplied.
x `select_cols` does not index within `dataset`.
',
call. = FALSE
)
}
} else if (any(select_cols %!in% colnames(metadata))) {
stop(
'
Error: `select_cols` must index within `metadata`.
i `filter_rows` has been supplied.
i `metadata` has been supplied.
x `select_cols` does not index within `metadata`.
',
call. = FALSE
)
}
}
# Subset dataset
if (!is.null(filter_rows)) {
if (is.null(metadata)) {
# Filter using dataset
dataset <- dataset[
do.call(CJ, filter_rows),
.SD,
.SDcols = select_cols,                      # Select columns for analysis
on = names(filter_rows),
nomatch = NULL                              # Omit non-matching rows
]
} else {
# Filter using metadata
dataset <- dataset[
metadata[
do.call(CJ, filter_rows),
.SD,                                      # Only `key` is returned to join as
.SDcols = data.table::key(metadata),      # subset with dataset on shared key
on = names(filter_rows),
nomatch = NULL                            # Omit non-matching rows
],
.SD,
.SDcols = select_cols,                      # Select columns for analysis
on = data.table::key(dataset),              # Join on `key`
nomatch = NULL                              # Omit non-matching rows
]
}
} else {
dataset <- dataset[, select_cols, with = FALSE] # Select columns
}
try({
# Correlation analysis
cor_result <- collapse::pwcor(
dataset,
N = TRUE, P = TRUE, array = TRUE,
use = "pairwise.complete.obs"
)
# Create output data.table (long format)
result_DT <- data.table::transpose(
collapse::qDT(aperm(cor_result)),
keep.names = "Correlation"
) %>%
tidyr::separate(.,
col = 1L, into = c("Correlation", "Target"), sep = "[.]"
) %>%
data.table::setnames(.,
old = c("V1", "V2", "V3"),
new = c("r", "n", "p")
) %>%
data.table::setcolorder(.,
c("Target", "Correlation", "n", "r", "p")
) %>%
# print(is.data.table(as.data.table(result_DT)))
data.table::as.data.table(.) %>%
{
unique(
.[, c("Target", "Correlation") :=
list(
pmin(Target, Correlation),
pmax(Target, Correlation)
)
],
by = c("Target", "Correlation")
)
}
# Calculate adjusted p-value
result_DT[, `:=`(q = p.adjust(p, method = (method)))]
if (!is.null(filter_rows)) {
# Include filters used
result_DT <- cbind(result_DT, collapse::qDT(filter_rows)) %>%
{
.[
, names(filter_rows)
:= purrr::imap(
.x = filter_rows,
.f = ~ paste(filter_rows[[.y]], collapse = ", ")
)
]
}
}
# Order output
data.table::setorder(result_DT, Target, q)
# Return output
if (self == "yes") {
# Include self-correlation
# Fill NA values for self-correlations
data.table::setnafill(
result_DT,
type = "const", fill = 0.0, nan = NA, cols = c("p", "q")
)
return(result_DT)
} else if (self == "no") {
# Exclude self-correlation
return(result_DT[!(Target == Correlation)])
}
})
}
#
cor_map_mod(
dataset = rnai_DT[,7:26]
# select_cols = targets#,
# filter_rows = list(lineage_1 = unique_lineages[1])
)
#
map_res <- cor_map_mod(
dataset = rnai_DT[,7:26]
# select_cols = targets#,
# filter_rows = list(lineage_1 = unique_lineages[1])
)
View(map_res)
colnames(crispr_DT_20[, !1:6])
colnames(crispr_DT_20[, 7:12])
colnames(crispr_DT_20[, 7:17])
# map function to a single target for each group
results_tm <- purrr::map(
.x = unique_lineages,
.f = ~ cor_target_map( # cor_target(
dataset = crispr_DT_20,
target = colnames(crispr_DT_20[, 7:10]),# genes, # "A1BG",
select_cols = colnames(crispr_DT_20[, 7:17]),
filter_rows = list(lineage_1 = .x),
# fun = cor_targets_mod
)
)
View(results_tm)
View(results_tm[1])
View(results_tm[[1]])
View(results_tm[[2]])
